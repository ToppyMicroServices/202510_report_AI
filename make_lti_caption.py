#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
make_lti_caption.py
- Read LTI_summary_stats.csv and emit TeX macros for figure captions.

Default IO:
  input:  LTI_summary_stats.csv
  output: Tables/lti_caption_numbers.tex

Usage:
  python make_lti_caption.py
  python make_lti_caption.py --csv LTI_summary_stats.csv --out Tables/lti_caption_numbers.tex
"""

import argparse
import csv
from pathlib import Path


def fmt(x, digits=3):
    try:
        return f"{float(x):.{digits}f}"
    except Exception:
        return str(x)


def main():
    ap = argparse.ArgumentParser(description="Generate TeX macros for LTI caption from CSV")
    ap.add_argument("--csv", default="LTI_summary_stats.csv", help="Input CSV path")
    ap.add_argument("--out", default="Tables/lti_caption_numbers.tex", help="Output TeX macro file")
    ap.add_argument("--digits-r", type=int, default=3, help="Digits for correlations")
    ap.add_argument("--digits-slope", type=int, default=3, help="Digits for slopes")
    ap.add_argument("--digits-pct", type=int, default=1, help="Digits for percent diffs")
    args = ap.parse_args()

    csv_path = Path(args.csv)
    if not csv_path.exists():
        raise SystemExit(f"Input CSV not found: {csv_path}")

    with csv_path.open(newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        try:
            row = next(reader)
        except StopIteration:
            raise SystemExit("Input CSV is empty")

    # Pull required fields with fallbacks
    def get(key, default=""):
        return row.get(key, default)

    # Correlations (NIS)
    pearson = fmt(get('pearson_NIS'), args.digits_r)
    pearson_lo = fmt(get('pearson_NIS_CI_lo'), args.digits_r)
    pearson_hi = fmt(get('pearson_NIS_CI_hi'), args.digits_r)
    spearman = fmt(get('spearman_NIS'), args.digits_r)

    # Slopes (NIS)
    ts_slope = fmt(get('TS_slope_NIS'), args.digits_slope)
    ts_slope_lo = fmt(get('TS_slope_NIS_CI_lo'), args.digits_slope)
    ts_slope_hi = fmt(get('TS_slope_NIS_CI_hi'), args.digits_slope)
    ols_slope = fmt(get('OLS_slope_NIS'), args.digits_slope)
    pct_diff = fmt(get('OLS_vs_TS_slope_diff_pct_NIS'), args.digits_pct)

    # Optional (tail NIS_q), in case needed elsewhere
    pearson_q = fmt(get('pearson_NISq'), args.digits_r) if get('pearson_NISq') != '' else ''
    spearman_q = fmt(get('spearman_NISq'), args.digits_r) if get('spearman_NISq') != '' else ''
    ts_slope_q = fmt(get('TS_slope_NIS_q'), args.digits_slope) if get('TS_slope_NIS_q') != '' else ''

    out_path = Path(args.out)
    if out_path.parent and not out_path.parent.exists():
        out_path.parent.mkdir(parents=True, exist_ok=True)

    lines = []
    lines.append("% Auto-generated by make_lti_caption.py; do not edit manually.")
    lines.append("% Source: " + str(csv_path.resolve()))
    lines.append("\\newcommand{\\LTIPearsonNIS}{" + pearson + "}")
    lines.append("\\newcommand{\\LTIPearsonNISLo}{" + pearson_lo + "}")
    lines.append("\\newcommand{\\LTIPearsonNISHi}{" + pearson_hi + "}")
    lines.append("\\newcommand{\\LTISpearmanNIS}{" + spearman + "}")
    lines.append("\\newcommand{\\LTITSSlopeNIS}{" + ts_slope + "}")
    lines.append("\\newcommand{\\LTITSSlopeNISLo}{" + ts_slope_lo + "}")
    lines.append("\\newcommand{\\LTITSSlopeNISHi}{" + ts_slope_hi + "}")
    lines.append("\\newcommand{\\LTIOLSSlopeNIS}{" + ols_slope + "}")
    lines.append("\\newcommand{\\LTIOLSTSDiffPctNIS}{" + pct_diff + "}")
    if pearson_q:
        lines.append("\\newcommand{\\LTIPearsonNISq}{" + pearson_q + "}")
    if spearman_q:
        lines.append("\\newcommand{\\LTISpearmanNISq}{" + spearman_q + "}")
    if ts_slope_q:
        lines.append("\\newcommand{\\LTITSSlopeNISq}{" + ts_slope_q + "}")

    out_path.write_text("\n".join(lines) + "\n", encoding='utf-8')
    print(f"[ok] wrote TeX macros: {out_path}")


if __name__ == "__main__":
    main()

